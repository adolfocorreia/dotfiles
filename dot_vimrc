""""" Light Vim config """""

" References:
" - https://codeinthehole.com/tips/vim-lists
" - https://nosarthur.github.io/productivity/2021/08/27/ex-vim.html
" - https://learnvimscriptthehardway.stevelosh.com
" - https://vim.fandom.com/wiki/Unused_keys
" - https://vimawesome.com

augroup vimrc
  autocmd!
augroup END

let mapleader      = ' '
let maplocalleader = '\\'

let loaded_python_provider  = 0
let loaded_python3_provider = 0
let loaded_ruby_provider    = 0
let loaded_node_provider    = 0
let loaded_perl_provider    = 0

let loaded_netrw             = 1
let loaded_netrwPlugin       = 1
let loaded_netrwSettings     = 1
let loaded_netrwFileHandlers = 1

let simple_terminal = ($TERM == 'linux') && !has('gui_running')
let windows = has('win32') || has('win64')



""""" Plugin declaration """""

let data_dir = expand(windows ? '~/vimfiles' : '~/.vim')
if empty(glob(data_dir . '/autoload/plug.vim'))
  let url = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  silent execute '!curl -fLo ' . data_dir . '/autoload/plug.vim --create-dirs ' . url
  autocmd vimrc VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if simple_terminal
  let g:plug_threads = 1
endif

"" Do not autoload the default bindings (av/iv)
let g:loaded_textobj_variable_segment = 1

call plug#begin()

Plug 'Julian/vim-textobj-variable-segment'
Plug 'airblade/vim-rooter'
Plug 'farmergreg/vim-lastplace'
Plug 'google/vim-searchindex'
Plug 'jpalardy/vim-slime'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim',         { 'on': ['Files','GFiles','Buffers','Rg','Lines','Locate','History','Commits','BCommits','Commands','Helptags'] }
Plug 'junegunn/vim-easy-align',  { 'on': '<Plug>(EasyAlign)' }
Plug 'justinmk/vim-dirvish',     { 'on': '<Plug>(dirvish_up)' }
Plug 'justinmk/vim-sneak'
Plug 'kana/vim-textobj-user'
Plug 'ludovicchabant/vim-gutentags'
Plug 'michaeljsmith/vim-indent-object'
Plug 'ntpeters/vim-better-whitespace'
Plug 'romainl/vim-qf'
Plug 'sheerun/vim-polyglot'
Plug 'svban/YankAssassin.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch',       { 'on': ['Dispatch','Make','Focus','Start'] }
Plug 'tpope/vim-eunuch',         { 'on': ['Delete','Move','Rename','Mkdir'] }
Plug 'tpope/vim-fugitive',       { 'on': 'Git' }
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'unblevable/quick-scope'
Plug 'vim-test/vim-test',        { 'on': ['TestNearest','TestFile','TestSuite'] }
Plug 'wellle/targets.vim'

if !simple_terminal
  Plug 'vim-airline/vim-airline'
endif

Plug 'cocopon/iceberg.vim'
Plug 'romainl/Apprentice'
" Plug 'drewtempelmeyer/palenight.vim'
" Plug 'jeffkreeftmeijer/vim-dim'
" Plug 'joshdick/onedark.vim'

call plug#end()


""""" Theme configuration """""

set background=dark
if !simple_terminal
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  set termguicolors
  colorscheme iceberg
else
  colorscheme apprentice
endif


""""" Plugin configuration """""

call textobj#user#plugin('variable', {
  \ '-': {
  \     'sfile': expand('<sfile>:p'),
  \     'select-a': 'aS',  'select-a-function': 'textobj#variable_segment#select_a',
  \     'select-i': 'iS',  'select-i-function': 'textobj#variable_segment#select_i',
  \ }})

let g:rooter_silent_chdir = 1

nmap n nzzzv<Plug>SearchIndex
nmap N Nzzzv<Plug>SearchIndex

let g:slime_no_mappings = 1
let g:slime_target = 'vimterminal'
let g:slime_vimterminal_config = { 'vertical': 1, 'close_cb': 'SlimeClearConfig' }
function! SlimeClearConfig(channel) abort
  bufdo if exists('b:slime_config') | unlet b:slime_config | endif
endfunction
autocmd FileType julia  let b:slime_vimterminal_cmd='julia'
autocmd FileType python let b:slime_vimterminal_cmd='ipython --profile=vi'
xmap gy  <Plug>SlimeRegionSend
nmap gy  <Plug>SlimeMotionSend
nmap gyy <Plug>SlimeLineSend

nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

nmap <BS> <Plug>(dirvish_up)

let g:sneak#label = 1

if has('mac')
  let g:gutentags_ctags_executable = '/opt/homebrew/bin/ctags'
endif

let g:qs_buftype_blacklist = ['help', 'nofile', 'nowrite', 'terminal']

execute 'highlight QuickScopePrimary   gui=underline guifg=' . synIDattr(synIDtrans(hlID('ErrorMsg')),   'fg', 'gui')
execute 'highlight QuickScopeSecondary gui=underline guifg=' . synIDattr(synIDtrans(hlID('WarningMsg')), 'fg', 'gui')

let test#strategy = 'dispatch'


""""" Vim options """""

set clipboard=unnamed,unnamedplus
set completefunc=syntaxcomplete#Complete
set completeopt=menuone,noinsert,noselect
set confirm
set cursorline
set diffopt+=vertical
set encoding=utf-8
set guioptions-=L
set guioptions-=T
set guioptions-=r
set guioptions-=t
set hidden
set hlsearch
set ignorecase
set joinspaces
set lazyredraw
set linebreak
set mouse=a
set noshowmode
set nowrap
set nrformats+=alpha
set number
set omnifunc=syntaxcomplete#Complete
set relativenumber
set scrolloff=2
set shiftround
set showcmd
set showmatch
set sidescrolloff=5
set smartcase
set splitbelow
set splitright
set tabstop=4
set virtualedit=block
set wildignore+=*.doc,*.docx,*.xls,*.xslx,*.ppt,*.pptx
set wildignore+=*.pdf
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.pyc,*.pyo,*.pyd
set wildignore+=*.swp
set wildignore+=*.zip,*.7z,*.tar,*.gz
set wildmode=list:longest

if has('win32')
  set guifont=Iosevka_Extended:h11
else
  set guifont=Iosevka\ Term\ Expanded\ 11
endif

if executable('rg')
  set grepprg=rg\ --vimgrep\ --smart-case\ --no-heading
endif

let &t_ti .= "\e[1 q"
let &t_te .= "\e[0 q"
let &t_SI .= "\e[5 q"
let &t_EI .= "\e[1 q"


""""" Autocommands """""

autocmd vimrc BufRead * normal zR
autocmd vimrc FileType fugitive nmap <buffer> <Tab> =
autocmd vimrc FileType help setlocal bufhidden=unload | wincmd L
autocmd vimrc FileType help,qf nnoremap <silent> <buffer> q :close<CR>
autocmd vimrc TerminalOpen * setlocal nonumber norelativenumber nocursorline nocursorcolumn
autocmd vimrc VimResized * tabdo wincmd =

" Set compilers/linters (run with :make %)
if executable('pylint')
  autocmd FileType python compiler pylint
endif
if executable('shellcheck')
  autocmd FileType sh compiler shellcheck
endif


""""" Key mappings """""

nnoremap Y y$

vnoremap > >gv
vnoremap < <gv

nnoremap & :&&<CR>
xnoremap & :&&<CR>

let @p="a \<Esc>p"

nnoremap <expr> j (v:count >= 10 ? "m'" . v:count : "") . 'j'
nnoremap <expr> k (v:count >= 10 ? "m'" . v:count : "") . 'k'

nmap go ]<Space>
nmap gO [<Space>
nmap gp ]p
nmap gP [p
nmap <C-j> ]e
nmap <C-k> [e
xmap <C-j> ]egv
xmap <C-k> [egv

nnoremap <silent> <C-s> :update<CR>
inoremap <silent> <C-s> <C-o>:update<CR>
tnoremap <C-g> <C-\><C-n>

nnoremap <C-w>1 1<C-w>w
nnoremap <C-w>2 2<C-w>w
nnoremap <C-w>3 3<C-w>w
nnoremap <C-w>4 4<C-w>w
nnoremap <C-w>5 5<C-w>w

nnoremap <C-w><Tab>c :tabclose<CR>
nnoremap <C-w><Tab>e :tabedit<CR>
nnoremap <C-w><Tab>n :tabnext<CR>
nnoremap <C-w><Tab>p :tabprevious<CR>
nnoremap <C-w><Tab>o :tabonly<CR>
nnoremap <C-w><Tab>1 1gt
nnoremap <C-w><Tab>2 2gt
nnoremap <C-w><Tab>3 3gt
nnoremap <C-w><Tab>4 4gt
nnoremap <C-w><Tab>5 5gt


""""" Leader mappings """""

nnoremap <Leader>v :edit $MYVIMRC<CR>
nnoremap <Leader>q :quitall<CR>


""""" User commands """""

command! Vtip echomsg system('curl --silent --max-time 5 https://vtip.43z.one')

