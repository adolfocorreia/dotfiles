""""" Light Vim config """""

" References:
" - https://codeinthehole.com/tips/vim-lists
" - https://nosarthur.github.io/productivity/2021/08/27/ex-vim.html

augroup vimrc
  autocmd!
augroup END

let mapleader      = ' '
let maplocalleader = '\\'

let loaded_python_provider  = 0
let loaded_python3_provider = 0
let loaded_ruby_provider    = 0
let loaded_node_provider    = 0
let loaded_perl_provider    = 0

let loaded_netrw             = 1
let loaded_netrwPlugin       = 1
let loaded_netrwSettings     = 1
let loaded_netrwFileHandlers = 1



""""" Plugin declaration """""

let data_dir = expand(has('win32') || has('win64') ? '~/vimfiles' : '~/.vim')
if empty(glob(data_dir . '/autoload/plug.vim'))
  let url = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  silent execute '!curl -fLo ' . data_dir . '/autoload/plug.vim --create-dirs ' . url
  autocmd vimrc VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if $TERM == 'linux'
  let g:plug_threads = 1
endif

call plug#begin()

Plug 'farmergreg/vim-lastplace'
Plug 'Julian/vim-textobj-variable-segment'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim',         { 'on': ['Files','GFiles','Buffers','Rg','Lines','Locate','History','Commits','BCommits','Commands','Helptags'] }
Plug 'junegunn/vim-easy-align',  { 'on': '<Plug>(EasyAlign)' }
Plug 'justinmk/vim-dirvish',     { 'on': '<Plug>(dirvish_up)' }
Plug 'justinmk/vim-sneak'
Plug 'kana/vim-textobj-user'
Plug 'ludovicchabant/vim-gutentags'
Plug 'mg979/vim-visual-multi',   { 'on': '<Plug>(VM-Find-Under)' }
Plug 'michaeljsmith/vim-indent-object'
Plug 'romainl/vim-qf'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch',         { 'on': ['Delete','Move','Rename','Mkdir'] }
Plug 'tpope/vim-fugitive',       { 'on': 'Git' }
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'unblevable/quick-scope'
Plug 'wellle/targets.vim'

if $TERM != 'linux'
  Plug 'vim-airline/vim-airline'
endif

Plug 'catppuccin/vim',  { 'as': 'catppuccin' }
Plug 'jeffkreeftmeijer/vim-dim'

call plug#end()


""""" Theme configuration """""

set background=dark
if $TERM != 'linux'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  set termguicolors
  colorscheme catppuccin_frappe
else
  colorscheme dim
endif


""""" Plugin configuration """""

nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

nmap <BS> <Plug>(dirvish_up)

let g:sneak#label = 1

let g:VM_maps = {}
let g:VM_maps['Find Under']         = '<M-d>'
let g:VM_maps['Find Subword Under'] = '<M-d>'
nmap <M-d> <Plug>(VM-Find-Under)

let g:qs_buftype_blacklist = ['help', 'nofile', 'nowrite', 'terminal']


""""" Vim options """""

set clipboard=unnamed,unnamedplus
set completefunc=syntaxcomplete#Complete
set completeopt=menu,menuone,noselect
set confirm
set cursorline
set diffopt+=vertical
set encoding=utf-8
set foldmethod=indent
set guioptions-=L
set guioptions-=m
set guioptions-=r
set guioptions-=t
set guioptions-=T
set hidden
set hlsearch
set ignorecase
set lazyredraw
set mouse=a
set noshowmode
set nowrap
set nrformats+=alpha
set number
set omnifunc=syntaxcomplete#Complete
set relativenumber
set scrolloff=2
set shiftround
set showcmd
set showmatch
set sidescrolloff=5
set smartcase
set splitbelow
set splitright
set virtualedit=block
set wildignore+=*.doc,*.docx,*.xls,*.xslx,*.ppt,*.pptx
set wildignore+=*.pdf
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.pyc,*.pyo,*.pyd
set wildignore+=*.swp
set wildignore+=*.zip,*.7z,*.tar,*.gz
set wildmode=list:longest

if has('win32')
  set guifont=Iosevka_Extended:h11
else
  set guifont=Iosevka\ Term\ Expanded\ 11
endif

let &t_ti .= "\e[1 q"
let &t_te .= "\e[0 q"
let &t_SI .= "\e[5 q"
let &t_EI .= "\e[1 q"


""""" Autocommands """""

autocmd vimrc BufRead * normal zR
autocmd vimrc FileType help setlocal bufhidden=unload | wincmd L
autocmd vimrc FileType help,qf nnoremap <silent> <buffer> q :close<CR>
autocmd vimrc TerminalOpen * setlocal nonumber norelativenumber nocursorline nocursorcolumn
autocmd vimrc VimResized * tabdo wincmd =

" Set compilers/linters (run with :make %)
if executable('pylint')
  autocmd FileType python compiler pylint
endif
if executable('shellcheck')
  autocmd FileType sh compiler shellcheck
endif


""""" Key mappings """""

nnoremap Y y$

vnoremap > >gv
vnoremap < <gv

nnoremap & :&&<CR>
xnoremap & :&&<CR>

let @p="a \<Esc>p"

nnoremap <expr> j (v:count >= 10 ? "m'" . v:count : "") . 'j'
nnoremap <expr> k (v:count >= 10 ? "m'" . v:count : "") . 'k'

nnoremap <silent> <C-s> :update<CR>
inoremap <silent> <C-s> <C-o>:update<CR>
tnoremap <C-g> <C-\><C-n>

nnoremap <C-w>1 1<C-w>w
nnoremap <C-w>2 2<C-w>w
nnoremap <C-w>3 3<C-w>w
nnoremap <C-w>4 4<C-w>w
nnoremap <C-w>5 5<C-w>w

nnoremap <C-w><Tab>c :tabclose<CR>
nnoremap <C-w><Tab>e :tabedit<CR>
nnoremap <C-w><Tab>n :tabnext<CR>
nnoremap <C-w><Tab>p :tabprevious<CR>
nnoremap <C-w><Tab>o :tabonly<CR>
nnoremap <C-w><Tab>1 1gt
nnoremap <C-w><Tab>2 2gt
nnoremap <C-w><Tab>3 3gt
nnoremap <C-w><Tab>4 4gt
nnoremap <C-w><Tab>5 5gt

